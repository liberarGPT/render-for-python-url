"""
Trading Agents Framework - State Management
"""

# Global variables for tracking state
class AppState:
    def __init__(self):
        self.analysis_queue = []
        self.symbol_states = {}
        self.current_symbol = None
        
        self.tool_calls_count = 0
        self.llm_calls_count = 0
        self.generated_reports_count = 0
        self.analysis_trace = []
        self.refresh_interval = 1.0  # seconds
        self.needs_ui_update = False  # Flag to indicate UI needs updating
        self.analysis_running = False

    def add_symbols_to_queue(self, symbols):
        """Add a list of symbols to the analysis queue."""
        self.analysis_queue.extend(symbols)

    def get_next_symbol(self):
        """Get the next symbol from the queue and set it as current."""
        if self.analysis_queue:
            self.current_symbol = self.analysis_queue.pop(0)
            if self.current_symbol not in self.symbol_states:
                self.init_symbol_state(self.current_symbol)
            return self.current_symbol
        self.current_symbol = None
        return None

    def get_state(self, symbol):
        """Get the state for a specific symbol."""
        return self.symbol_states.get(symbol)

    def get_current_state(self):
        """Get the state for the current symbol."""
        if self.current_symbol:
            return self.symbol_states.get(self.current_symbol)
        return None

    def init_symbol_state(self, symbol):
        """Initialize the state for a new symbol."""
        self.symbol_states[symbol] = {
            "agent_statuses": {
                "Market Analyst": "pending",
                "Social Analyst": "pending",
                "News Analyst": "pending",
                "Fundamentals Analyst": "pending",
                "Bull Researcher": "pending",
                "Bear Researcher": "pending",
                "Research Manager": "pending",
                "Trader": "pending",
                "Risky Analyst": "pending",
                "Safe Analyst": "pending",
                "Neutral Analyst": "pending",
                "Portfolio Manager": "pending"
            },
            "current_reports": {
                "market_report": None,
                "sentiment_report": None,
                "news_report": None,
                "fundamentals_report": None,
                "bull_report": None,
                "bear_report": None,
                "research_manager_report": None,
                "investment_plan": None, 
                "trader_investment_plan": None,
                "risky_report": None,
                "safe_report": None,
                "neutral_report": None,
                "portfolio_decision": None,
                "final_trade_decision": None
            },
            "investment_debate_state": None,
            "analysis_complete": False,
            "analysis_results": None,
            "ticker_symbol": symbol,
            "chart_data": None,
            "chart_period": "1y",  # Default chart period
        }

    def update_agent_status(self, agent, status):
        """Update the status of an agent for the current symbol."""
        state = self.get_current_state()
        if state:
            if agent in state["agent_statuses"]:
                if status not in ["pending", "in_progress", "completed"]:
                    print(f"Warning: Invalid status '{status}' for agent '{agent}', defaulting to 'pending'")
                    status = "pending"
                
                if state["agent_statuses"][agent] != status:
                    state["agent_statuses"][agent] = status
                    print(f"[STATE - {self.current_symbol}] Updated {agent} status to {status}")
                    self.needs_ui_update = True

    def reset(self):
        """Reset the application state for all symbols."""
        print("[STATE] Resetting application state")
        self.analysis_queue = []
        self.symbol_states = {}
        self.current_symbol = None
        self.analysis_running = False
        self.analysis_trace = []
        self.tool_calls_count = 0
        self.llm_calls_count = 0
        self.generated_reports_count = 0
        
    def process_chunk_updates(self, chunk):
        """Process chunk updates from the graph stream for the current symbol."""
        state = self.get_current_state()
        if not state:
            return

        ui_update_needed = False

        report_to_agent = {
            "market_report": "Market Analyst",
            "sentiment_report": "Social Analyst",
            "news_report": "News Analyst",
            "fundamentals_report": "Fundamentals Analyst",
            "bull_report": "Bull Researcher",
            "bear_report": "Bear Researcher",
            "research_manager_report": "Research Manager",
            "investment_plan": "Trader",
            "trader_investment_plan": "Risky Analyst",
            "risky_report": "Risky Analyst",
            "safe_report": "Safe Analyst",
        }
        
        # Check for analyst activity before reports are generated
        # These keys indicate an analyst is working even before their report is ready
        analyst_activity_keys = {
            "Social Analyst": ["social_media_data", "social_sentiment_analysis", "tool_social"],
            "News Analyst": ["news_data", "news_analysis", "tool_news"],
            "Fundamentals Analyst": ["fundamentals_data", "fundamentals_analysis", "tool_fundamentals"]
        }
        
        # Check for activity indicators for each analyst
        for analyst, activity_keys in analyst_activity_keys.items():
            for key in activity_keys:
                if key in chunk and state["agent_statuses"].get(analyst) == "pending":
                    self.update_agent_status(analyst, "in_progress")
                    ui_update_needed = True
                    break
        
        # Update analyst reports
        for analyst_type in ["market_report", "sentiment_report", "news_report", "fundamentals_report"]:
            if analyst_type in chunk and chunk[analyst_type] and chunk[analyst_type] != state["current_reports"][analyst_type]:
                state["current_reports"][analyst_type] = chunk[analyst_type]
                self.generated_reports_count += 1
                ui_update_needed = True

                agent = report_to_agent[analyst_type]
                # Update to in_progress if pending, or to completed if already in_progress
                if state["agent_statuses"].get(agent) == "pending":
                    self.update_agent_status(agent, "in_progress")
                elif state["agent_statuses"].get(agent) == "in_progress":
                    self.update_agent_status(agent, "completed")
                    
                    # Set next analyst to in_progress if this is a completed report
                    # This ensures the next analyst shows as in_progress right away
                    analyst_sequence = ["Market Analyst", "Social Analyst", "News Analyst", "Fundamentals Analyst"]
                    if agent in analyst_sequence and agent != analyst_sequence[-1]:
                        next_index = analyst_sequence.index(agent) + 1
                        next_analyst = analyst_sequence[next_index]
                        if state["agent_statuses"].get(next_analyst) == "pending":
                            self.update_agent_status(next_analyst, "in_progress")
        
        # Research team debate state
        if "investment_debate_state" in chunk:
            debate_state = chunk["investment_debate_state"]
            
            # Store the full debate state for chat UI access
            state["investment_debate_state"] = debate_state
            
            # Bull researcher
            if "bull_history" in debate_state and debate_state["bull_history"]:
                self.update_agent_status("Bull Researcher", "in_progress")
                state["current_reports"]["bull_report"] = debate_state["bull_history"]
                ui_update_needed = True
            
            # Bear researcher
            if "bear_history" in debate_state and debate_state["bear_history"]:
                self.update_agent_status("Bear Researcher", "in_progress")
                state["current_reports"]["bear_report"] = debate_state["bear_history"]
                ui_update_needed = True
            
            # Research manager
            if "judge_decision" in debate_state and debate_state["judge_decision"]:
                self.update_agent_status("Bull Researcher", "completed")
                self.update_agent_status("Bear Researcher", "completed")
                self.update_agent_status("Research Manager", "completed")
                state["current_reports"]["research_manager_report"] = debate_state["judge_decision"]
                state["current_reports"]["investment_plan"] = debate_state["judge_decision"]
                self.update_agent_status("Trader", "in_progress")
                ui_update_needed = True
        
        # Trader plan
        if "trader_investment_plan" in chunk and chunk["trader_investment_plan"]:
            state["current_reports"]["trader_investment_plan"] = chunk["trader_investment_plan"]
            self.update_agent_status("Trader", "completed")
            self.update_agent_status("Risky Analyst", "in_progress")
            ui_update_needed = True
        
        # Risk debate state
        if "risk_debate_state" in chunk:
            risk_state = chunk["risk_debate_state"]
            
            # Store the full risk debate state for debugging and chat UI access
            state["risk_debate_state"] = risk_state
            
            # Risky analyst
            if "current_risky_response" in risk_state and risk_state["current_risky_response"]:
                self.update_agent_status("Risky Analyst", "in_progress")
                # Extract just the content without the "Risky Analyst:" prefix if present
                risky_content = risk_state["current_risky_response"]
                if risky_content.startswith("Risky Analyst: "):
                    risky_content = risky_content[15:]  # Remove "Risky Analyst: " prefix
                state["current_reports"]["risky_report"] = risky_content
                print(f"[STATE - {self.current_symbol}] Updated risky_report with content length: {len(risky_content)}")
                ui_update_needed = True
            
            # Safe analyst
            if "current_safe_response" in risk_state and risk_state["current_safe_response"]:
                self.update_agent_status("Safe Analyst", "in_progress")
                # Extract just the content without the "Safe Analyst:" prefix if present
                safe_content = risk_state["current_safe_response"]
                if safe_content.startswith("Safe Analyst: "):
                    safe_content = safe_content[14:]  # Remove "Safe Analyst: " prefix
                state["current_reports"]["safe_report"] = safe_content
                print(f"[STATE - {self.current_symbol}] Updated safe_report with content length: {len(safe_content)}")
                ui_update_needed = True
            
            # Neutral analyst
            if "current_neutral_response" in risk_state and risk_state["current_neutral_response"]:
                self.update_agent_status("Neutral Analyst", "in_progress")
                # Extract just the content without the "Neutral Analyst:" prefix if present
                neutral_content = risk_state["current_neutral_response"]
                if neutral_content.startswith("Neutral Analyst: "):
                    neutral_content = neutral_content[17:]  # Remove "Neutral Analyst: " prefix
                state["current_reports"]["neutral_report"] = neutral_content
                print(f"[STATE - {self.current_symbol}] Updated neutral_report with content length: {len(neutral_content)}")
                ui_update_needed = True
            
            # Portfolio manager - preserve individual reports when final decision is made
            if "judge_decision" in risk_state and risk_state["judge_decision"]:
                # Ensure individual reports are preserved from the debate history
                if not state["current_reports"]["risky_report"] and "risky_history" in risk_state:
                    risky_history = risk_state["risky_history"]
                    if risky_history:
                        state["current_reports"]["risky_report"] = risky_history.replace("Risky Analyst: ", "").strip()
                
                if not state["current_reports"]["safe_report"] and "safe_history" in risk_state:
                    safe_history = risk_state["safe_history"]
                    if safe_history:
                        state["current_reports"]["safe_report"] = safe_history.replace("Safe Analyst: ", "").strip()
                
                if not state["current_reports"]["neutral_report"] and "neutral_history" in risk_state:
                    neutral_history = risk_state["neutral_history"]
                    if neutral_history:
                        state["current_reports"]["neutral_report"] = neutral_history.replace("Neutral Analyst: ", "").strip()
                
                # Mark all as completed
                self.update_agent_status("Risky Analyst", "completed")
                self.update_agent_status("Safe Analyst", "completed")
                self.update_agent_status("Neutral Analyst", "completed")
                self.update_agent_status("Portfolio Manager", "completed")
                
                # Set final decisions
                state["current_reports"]["portfolio_decision"] = risk_state["judge_decision"]
                state["current_reports"]["final_trade_decision"] = risk_state["judge_decision"]
                
                print(f"[STATE - {self.current_symbol}] Final decision set. Reports status:")
                print(f"  risky_report: {len(state['current_reports']['risky_report'] or '') > 0}")
                print(f"  safe_report: {len(state['current_reports']['safe_report'] or '') > 0}")
                print(f"  neutral_report: {len(state['current_reports']['neutral_report'] or '') > 0}")
                print(f"  final_trade_decision: {len(state['current_reports']['final_trade_decision'] or '') > 0}")
                
                ui_update_needed = True
        
        # Update counts based on messages
        if "messages" in chunk and len(chunk.get("messages", [])) > 0:
            self.llm_calls_count += 1
            ui_update_needed = True
        
        # Approximation of tool calls
        if any(key for key in chunk.keys() if key.startswith("tool_")):
            self.tool_calls_count += 1
            ui_update_needed = True
                

        # Set the UI update flag if any changes were made
        if ui_update_needed:
            self.needs_ui_update = True
            print(f"[STATE] Setting needs_ui_update flag due to chunk updates")

# Create a global instance
app_state = AppState() 